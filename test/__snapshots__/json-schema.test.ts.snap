// Vitest Snapshot v1, https://vitest.dev/guide/snapshot.html

exports[`json-schema > it should generate schemas from dual codecs 1`] = `
{
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "created_at": {
      "type": "string",
    },
  },
  "required": [
    "created_at",
  ],
  "type": "object",
}
`;

exports[`json-schema > it should generate schemas from dual codecs 2`] = `
{
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "created_at": {
      "nodeType": "date",
    },
  },
  "required": [
    "created_at",
  ],
  "type": "object",
}
`;

exports[`json-schema > it should generate schemas from recursive codecs 1`] = `
{
  "$ref": "#/definitions/RecursiveCodec",
  "definitions": {
    "RecursiveCodec": {
      "additionalProperties": false,
      "properties": {
        "a": {
          "type": "string",
        },
        "b": {
          "$ref": "#/definitions/RecursiveCodec",
        },
      },
      "required": [
        "a",
      ],
      "type": "object",
    },
  },
}
`;

exports[`json-schema > it should handle a simple identity schema 1`] = `
{
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "any": {},
    "array": {
      "items": {
        "type": "string",
      },
      "type": "array",
    },
    "boolean": {
      "type": "boolean",
    },
    "deeper_array": {
      "items": {
        "additionalProperties": false,
        "properties": {
          "a": {
            "type": "string",
          },
        },
        "required": [
          "a",
        ],
        "type": "object",
      },
      "type": "array",
    },
    "enum": {
      "enum": [
        "a",
        "b",
      ],
      "type": "string",
    },
    "intersection": {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "a": {
              "type": "string",
            },
            "b": {
              "type": "number",
            },
          },
          "required": [
            "b",
            "a",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "a": {
              "type": "string",
            },
            "c": {
              "type": "number",
            },
          },
          "required": [
            "c",
            "a",
          ],
          "type": "object",
        },
      ],
    },
    "literal_bool": {
      "const": true,
      "type": "boolean",
    },
    "literal_num": {
      "const": 1,
      "type": "number",
    },
    "literal_string": {
      "const": "literal",
      "type": "string",
    },
    "multi": {
      "anyOf": [
        {
          "type": "string",
        },
        {
          "type": "number",
        },
        {
          "type": "boolean",
        },
      ],
    },
    "null": {
      "type": "null",
    },
    "number": {
      "type": "number",
    },
    "optional": {
      "type": "string",
    },
    "record": {
      "additionalProperties": {
        "type": "string",
      },
      "properties": {},
      "required": [],
      "type": "object",
    },
    "string": {
      "type": "string",
    },
    "tuple": {
      "items": [
        {
          "type": "string",
        },
        {
          "type": "number",
        },
      ],
      "maxItems": 2,
      "minItems": 2,
      "type": "array",
    },
    "with_description": {
      "description": "This is a description",
      "type": "string",
    },
  },
  "required": [
    "string",
    "number",
    "boolean",
    "any",
    "null",
    "literal_string",
    "literal_num",
    "literal_bool",
    "enum",
    "tuple",
    "multi",
    "array",
    "deeper_array",
    "record",
    "intersection",
    "with_description",
  ],
  "type": "object",
}
`;

exports[`json-schema > it should intersect a set of only unions 1`] = `
{
  "allOf": [
    {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "a": {
              "type": "string",
            },
          },
          "required": [
            "a",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "b": {
              "type": "string",
            },
          },
          "required": [
            "b",
          ],
          "type": "object",
        },
      ],
    },
    {
      "anyOf": [
        {
          "additionalProperties": false,
          "properties": {
            "c": {
              "type": "string",
            },
          },
          "required": [
            "c",
          ],
          "type": "object",
        },
        {
          "additionalProperties": false,
          "properties": {
            "d": {
              "type": "string",
            },
          },
          "required": [
            "d",
          ],
          "type": "object",
        },
      ],
    },
  ],
  "definitions": {},
}
`;

exports[`json-schema > it should merge intersections 1`] = `
{
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "a": {
      "type": "string",
    },
    "b": {
      "type": "string",
    },
    "c": {
      "type": "string",
    },
  },
  "required": [
    "a",
    "b",
    "c",
  ],
  "type": "object",
}
`;

exports[`json-schema > it should merge intersections 2`] = `
{
  "additionalProperties": false,
  "definitions": {},
  "properties": {
    "a": {
      "type": "string",
    },
  },
  "required": [
    "a",
  ],
  "type": "object",
}
`;

exports[`json-schema > it should product intersections containing union and object schemas 1`] = `
{
  "anyOf": [
    {
      "additionalProperties": false,
      "properties": {
        "a": {
          "type": "string",
        },
        "b": {
          "type": "string",
        },
        "d": {
          "type": "string",
        },
      },
      "required": [
        "b",
        "a",
        "d",
      ],
      "type": "object",
    },
    {
      "additionalProperties": false,
      "properties": {
        "a": {
          "type": "string",
        },
        "c": {
          "type": "string",
        },
        "d": {
          "type": "string",
        },
      },
      "required": [
        "c",
        "a",
        "d",
      ],
      "type": "object",
    },
  ],
  "definitions": {},
}
`;
